// Online C++ compiler to run C++ program online
#include <bits/stdc++.h>
using namespace std;

struct Node{
    int key;
    Node* left;
    Node* right;
    Node(int k){
        key = k;
        left = right = NULL;
    }
};

int height(Node* root){
    if(root == NULL){
        return -1;
    }
    return max(height(root->left),height(root->right))+1;
}

void distanceK(Node* root, int k){
    if(k<0 || root == NULL){
        return;
    }
    if(k == 0){
        cout<<root->key<<endl;
    }
    distanceK(root->left,k-1);
    distanceK(root->right,k-1);
}

void printLevelOrder(Node* root){
    queue<Node*> q;
    q.push(root);
    
    while(q.empty() == false){
        Node* curr = q.front();
        q.pop();
        cout<<curr->key<<" ";
        if(curr->left != NULL){
            q.push(curr->left);
        }
        if(curr->right != NULL){
            q.push(curr->right);
        }
    }
}

int sizeOfTree(Node* root){
    if(root == NULL)
        return 0;
    return (sizeOfTree(root->left)+1+sizeOfTree(root->right));
}

int findMax(Node* root){
    if(root == NULL){
        return 0;
    }
    else{
        return max(root->key,max(findMax(root->left),findMax(root->right)));
    }
}


int main() {
    Node *root = new Node(1); 
    root->left = new Node(2); 
    root->right = new Node(3); 
    root->left->left = new Node(4); 
    root->left->right = new Node(5); 
    root->right->left = new Node(8);
    
    cout<<height(root)<<endl;
    cout<<"-------------"<<endl;
    distanceK(root,2);
    cout<<"-------------"<<endl;
    printLevelOrder(root);
    cout<<endl;
    cout<<"-------------"<<endl;
    cout<<sizeOfTree(root)<<endl;
    cout<<"-------------"<<endl;
    cout<<findMax(root)<<endl;
    

    return 0;
}


----------------------------------------------------------------------

Finding LCA in Binary Tree

bool findPath(Node* root, vector<int>& path, int k)
{
    // base case
    if (root == NULL)
        return false;

    // Store this node in path vector.
    // The node will be removed if
    // not in path from root to k
    path.push_back(root->key);

    // See if the k is same as root's key
    if (root->key == k)
        return true;

    // Check if k is found in left or right sub-tree
    if ((root->left && findPath(root->left, path, k)) || 
        (root->right && findPath(root->right, path, k)))
        return true;

    // If not present in subtree rooted with root,
    // remove root from path[] and return false
    path.pop_back();

    return false;
}

// Function to return LCA if node n1, n2 are
// present in the given binary tree, otherwise
// return -1
int findLCA(Node* root, int n1, int n2)
{
    // to store paths to n1 and n2 from the root
    vector<int> path1, path2;

    // Find paths from root to n1 and root to n1.
    // If either n1 or n2 is not present, return -1
    if (!findPath(root, path1, n1) || !findPath(root, path2, n2))
        return -1;

    // Compare the paths to get the first
    // different value
    int i;

    for (i = 0; i < path1.size() && i < path2.size(); i++)
        if (path1[i] != path2[i])
            break;

    return path1[i - 1];
}
--------------------------------------------------------------------

