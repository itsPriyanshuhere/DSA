// maximum Profit using dynamic programming
#include <iostream>
using namespace std;
int maxProfit(int price[], int n, int k)
{
    int dp[k + 1][n + 1];
    for (int i = 0; i <= k; i++)
    {
        int prevDiff = INT_MIN;
        for (int j = 0; j <= n; j++)
        {
            if (i == 0 || j == 0)
                dp[i][j] = 0;
            else
            {
                prevDiff = max(prevDiff, dp[i - 1][j - 1] - price[j - 1]);
                dp[i][j] = max(dp[i][j - 1], price[j] + prevDiff);
            }
        }
    }
    return dp[k][n - 1];
}

int main()
{
    int price[] = { 2, 5, 7, 1, 4, 3, 1, 3 };
    int n = sizeof(price) / sizeof(price[0]);
    int k = 3;
    cout << maxProfit(price, n, k);
    return 0;
}